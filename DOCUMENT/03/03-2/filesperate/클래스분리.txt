- 헤더파일의 역할을 알고 있다.
- C언어를 대상으로 헤더파일에 들어가야 할 내용을 구분할 수 있다.
- 헤더파일의 중복포함을 막기 위해서 사용하는 매크로 #ifndef ~~#endif을 알고 있다.
- 둘 이상의 파일을 컴파일해서 하나의 실행파일을 만드는 법을 알고 있다.
- 링커(Linker)가 하는 일을 알고 있다.

1. **헤더파일의 역할**: 헤더 파일은 주로 함수, 변수, 구조체, 매크로 등의 선언을 담고 있는 파일입니다. 이러한 선언들은 보통 프로그램의 여러 소스 파일에서 공통적으로 사용되는 경우에 활용됩니다. 헤더 파일의 주요 역할은 다음과 같습니다:
   - 함수 및 변수의 선언: 다른 소스 파일에서 사용할 함수나 변수의 선언을 포함합니다.
   - 매크로와 상수의 정의: 프로그램 전반에 걸쳐 사용되는 매크로나 상수의 정의를 포함합니다.
   - 사용자 정의 자료형의 선언: 구조체나 열거형 등의 사용자 정의 자료형을 선언합니다.
   - 외부 라이브러리와의 인터페이스: 외부 라이브러리에 대한 선언을 담아 해당 라이브러리를 사용할 수 있도록 합니다.

2. **C언어를 대상으로 헤더파일에 들어가야 할 내용을 구분할 수 있는지**: 
   - 헤더 파일에는 주로 함수의 프로토타입, 구조체 및 변수의 선언, 매크로, 상수 등을 포함합니다. 특히, 여러 소스 파일에서 공통으로 사용되는 선언들이 포함되어야 합니다.

3. **중복 포함을 막기 위한 매크로 #ifndef ~~#endif에 대한 이해**:
   - `#ifndef`은 "if not defined"의 약자로, 특정한 매크로가 정의되지 않았을 때 코드 블록을 실행합니다.
   - 헤더 파일의 중복 포함을 막기 위해 일반적으로 다음과 같은 구조를 사용합니다:
     ```c
     #ifndef SOME_HEADER_FILE_H_
     #define SOME_HEADER_FILE_H_

     // 헤더 파일의 내용

     #endif
     ```

    SOME_HEADER_FILE_H_는 해당 헤더 파일의 고유한 이름입니다. 이 이름은 보통 해당 헤더 파일의 이름을 대문자로 변형하고 _H_를 추가하여 정의합니다.
    #ifndef은 "if not defined"의 약자로, 아직 해당 이름이 정의되지 않았을 때 코드 블록을 실행합니다.
    #define은 해당 이름을 정의합니다. 여기서는 헤더 파일의 이름을 정의합니다.
    #endif는 코드 블록의 끝을 나타내며, 이 안에는 해당 헤더 파일의 내용이 들어갑니다.     
   - 위의 코드는 특정 매크로 `SOME_HEADER_FILE_H_`가 정의되어 있지 않은 경우에만 헤더 파일의 내용을 포함하도록 합니다.

4. **둘 이상의 파일을 컴파일해서 하나의 실행 파일을 만드는 법**:
   - 여러 소스 파일을 하나의 실행 파일로 만들기 위해서는 다음과 같은 과정을 거칩니다:
     1. 각 소스 파일들을 컴파일러를 통해 개별적으로 컴파일하여 오브젝트 파일(`.o` 또는 `.obj`)을 생성합니다.
     2. 생성된 오브젝트 파일들을 링커를 통해 하나의 실행 파일로 결합합니다.
   - 일반적으로 컴파일러 및 링커에 대한 명령어를 통해 이러한 과정을 자동화합니다.

5. **링커(Linker)가 하는 일**:
   - 링커는 여러 개의 오브젝트 파일을 하나의 실행 가능한 파일로 결합하는 역할을 합니다.
   - 링커의 주요 작업은 다음과 같습니다:
     - 오브젝트 파일들 간의 상호 의존성 해결: 각 오브젝트 파일이 참조하는 함수나 변수의 위치를 식별하고 이를 연결합니다.
     - 심볼 해결(Symbol Resolution): 오브젝트 파일들이 참조하는 외부 심볼(함수나 변수 등)의 위치를 식별하여 연결합니다.
     - 실행 파일의 생성: 모든 오브젝트 파일을 결합하여 하나의 실행 가능한 파일을 생성합니다.
     - 라이브러리 링크: 필요한 경우 외부 라이브러리도 링크하여 실행 파일에 포함시킵니다.
   - 링커는 컴파일된 프로그램의 최종적인 형태를 결정하므로 매우 중요한 역할을 합니다.


 1. 컴파일
g++ -c Car.cpp -o Car.o
g++ -c RacingMain.cpp -o RacingMain.o
  
2. 링크
g++ Car.o RacingMain.o -o RacingApp

3. 실행
./RacingApp
